/**
 * MHDESignature.java - A class to do DSA signing/verification operations and DSA key pair generation
 * This class uses already available java cryptography library methods to do DSA signing/verification operations
 * 
 * @author Mahesh S. Perera
 */

package thesis.mhde.crypto;

import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;

public class MHDESignature {

	/**
	 * Performs DSA signing operation
	 * 
	 * @param data
	 *            message to be signed
	 * @param ssk
	 *            user's signing private key
	 * @return signature
	 */

	public static byte[] signWithDSA(byte[] data, PrivateKey ssk) {
		byte[] signature = null;

		try {
			Signature dsa = Signature.getInstance("SHA1withDSA", "SUN");
			dsa.initSign(ssk);
			dsa.update(data);
			signature = dsa.sign();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return signature;
	}

	/**
	 * Performs the DSA verification operation
	 * 
	 * @param data
	 *            original message that was signed
	 * @param signature
	 *            signature generated by signing the message
	 * @param pub
	 *            signing public key used to verify the signature
	 * @return
	 */
	public static boolean verifyWithDSA(byte[] data, byte[] signature, PublicKey pub) {

		boolean doesVerify = false;

		try {
			Signature dsa = Signature.getInstance("SHA1withDSA", "SUN");
			dsa.initVerify(pub);
			dsa.update(data);
			doesVerify = dsa.verify(signature);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return doesVerify;
	}

	/**
	 * Generates a DSA public/private key pair for signing
	 * 
	 * @param keySize
	 *            DSA key size in bits
	 * @return a DSA public/private key pair
	 */

	public static KeyPair generateDSAKeyPair(int keySize) {
		KeyPairGenerator signatureKeyGen = null;
		KeyPair signaturePair = null;

		try {
			signatureKeyGen = KeyPairGenerator.getInstance("DSA", "SUN");
			signatureKeyGen.initialize(keySize, SecureRandom.getInstance("SHA1PRNG", "SUN"));
			signaturePair = signatureKeyGen.generateKeyPair();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return signaturePair;
	}

}
